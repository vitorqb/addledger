// Code generated by MockGen. DO NOT EDIT.
// Source: accountguesser.go

// Package mock_accountguesser is a generated GoMock package.
package mock_accountguesser

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	accountguesser "github.com/vitorqb/addledger/internal/accountguesser"
	journal "github.com/vitorqb/addledger/internal/journal"
)

// MockIAccountGuesser is a mock of IAccountGuesser interface.
type MockIAccountGuesser struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountGuesserMockRecorder
}

// MockIAccountGuesserMockRecorder is the mock recorder for MockIAccountGuesser.
type MockIAccountGuesserMockRecorder struct {
	mock *MockIAccountGuesser
}

// NewMockIAccountGuesser creates a new mock instance.
func NewMockIAccountGuesser(ctrl *gomock.Controller) *MockIAccountGuesser {
	mock := &MockIAccountGuesser{ctrl: ctrl}
	mock.recorder = &MockIAccountGuesserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountGuesser) EXPECT() *MockIAccountGuesserMockRecorder {
	return m.recorder
}

// Guess mocks base method.
func (m *MockIAccountGuesser) Guess(transactionHistory accountguesser.TransactionHistory, inputPostings []journal.Posting, description string) (journal.Account, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Guess", transactionHistory, inputPostings, description)
	ret0, _ := ret[0].(journal.Account)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Guess indicates an expected call of Guess.
func (mr *MockIAccountGuesserMockRecorder) Guess(transactionHistory, inputPostings, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Guess", reflect.TypeOf((*MockIAccountGuesser)(nil).Guess), transactionHistory, inputPostings, description)
}
