// Code generated by MockGen. DO NOT EDIT.
// Source: ammountguesser.go

// Package mock_ammountguesser is a generated GoMock package.
package mock_ammountguesser

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	finance "github.com/vitorqb/addledger/internal/finance"
	input "github.com/vitorqb/addledger/internal/input"
	journal "github.com/vitorqb/addledger/internal/journal"
)

// MockIEngine is a mock of IEngine interface.
type MockIEngine struct {
	ctrl     *gomock.Controller
	recorder *MockIEngineMockRecorder
}

// MockIEngineMockRecorder is the mock recorder for MockIEngine.
type MockIEngineMockRecorder struct {
	mock *MockIEngine
}

// NewMockIEngine creates a new mock instance.
func NewMockIEngine(ctrl *gomock.Controller) *MockIEngine {
	mock := &MockIEngine{ctrl: ctrl}
	mock.recorder = &MockIEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEngine) EXPECT() *MockIEngineMockRecorder {
	return m.recorder
}

// Guess mocks base method.
func (m *MockIEngine) Guess() (finance.Ammount, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Guess")
	ret0, _ := ret[0].(finance.Ammount)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Guess indicates an expected call of Guess.
func (mr *MockIEngineMockRecorder) Guess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Guess", reflect.TypeOf((*MockIEngine)(nil).Guess))
}

// SetMatchingTransactions mocks base method.
func (m *MockIEngine) SetMatchingTransactions(x []journal.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMatchingTransactions", x)
}

// SetMatchingTransactions indicates an expected call of SetMatchingTransactions.
func (mr *MockIEngineMockRecorder) SetMatchingTransactions(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMatchingTransactions", reflect.TypeOf((*MockIEngine)(nil).SetMatchingTransactions), x)
}

// SetPostingInputs mocks base method.
func (m *MockIEngine) SetPostingInputs(x []*input.PostingInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPostingInputs", x)
}

// SetPostingInputs indicates an expected call of SetPostingInputs.
func (mr *MockIEngineMockRecorder) SetPostingInputs(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPostingInputs", reflect.TypeOf((*MockIEngine)(nil).SetPostingInputs), x)
}

// SetUserInputText mocks base method.
func (m *MockIEngine) SetUserInputText(x string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserInputText", x)
}

// SetUserInputText indicates an expected call of SetUserInputText.
func (mr *MockIEngineMockRecorder) SetUserInputText(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserInputText", reflect.TypeOf((*MockIEngine)(nil).SetUserInputText), x)
}
