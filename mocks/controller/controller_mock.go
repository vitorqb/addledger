// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	listaction "github.com/vitorqb/addledger/internal/listaction"
)

// MockIInputController is a mock of IInputController interface.
type MockIInputController struct {
	ctrl     *gomock.Controller
	recorder *MockIInputControllerMockRecorder
}

// MockIInputControllerMockRecorder is the mock recorder for MockIInputController.
type MockIInputControllerMockRecorder struct {
	mock *MockIInputController
}

// NewMockIInputController creates a new mock instance.
func NewMockIInputController(ctrl *gomock.Controller) *MockIInputController {
	mock := &MockIInputController{ctrl: ctrl}
	mock.recorder = &MockIInputControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInputController) EXPECT() *MockIInputControllerMockRecorder {
	return m.recorder
}

// OnDateInput mocks base method.
func (m *MockIInputController) OnDateInput(date time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDateInput", date)
}

// OnDateInput indicates an expected call of OnDateInput.
func (mr *MockIInputControllerMockRecorder) OnDateInput(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDateInput", reflect.TypeOf((*MockIInputController)(nil).OnDateInput), date)
}

// OnDescriptionInput mocks base method.
func (m *MockIInputController) OnDescriptionInput(description string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDescriptionInput", description)
}

// OnDescriptionInput indicates an expected call of OnDescriptionInput.
func (mr *MockIInputControllerMockRecorder) OnDescriptionInput(description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDescriptionInput", reflect.TypeOf((*MockIInputController)(nil).OnDescriptionInput), description)
}

// OnInputConfirmation mocks base method.
func (m *MockIInputController) OnInputConfirmation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnInputConfirmation")
}

// OnInputConfirmation indicates an expected call of OnInputConfirmation.
func (mr *MockIInputControllerMockRecorder) OnInputConfirmation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInputConfirmation", reflect.TypeOf((*MockIInputController)(nil).OnInputConfirmation))
}

// OnInputRejection mocks base method.
func (m *MockIInputController) OnInputRejection() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnInputRejection")
}

// OnInputRejection indicates an expected call of OnInputRejection.
func (mr *MockIInputControllerMockRecorder) OnInputRejection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInputRejection", reflect.TypeOf((*MockIInputController)(nil).OnInputRejection))
}

// OnPostingAccountChanged mocks base method.
func (m *MockIInputController) OnPostingAccountChanged(newText string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPostingAccountChanged", newText)
}

// OnPostingAccountChanged indicates an expected call of OnPostingAccountChanged.
func (mr *MockIInputControllerMockRecorder) OnPostingAccountChanged(newText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPostingAccountChanged", reflect.TypeOf((*MockIInputController)(nil).OnPostingAccountChanged), newText)
}

// OnPostingAccountDone mocks base method.
func (m *MockIInputController) OnPostingAccountDone(account string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPostingAccountDone", account)
}

// OnPostingAccountDone indicates an expected call of OnPostingAccountDone.
func (mr *MockIInputControllerMockRecorder) OnPostingAccountDone(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPostingAccountDone", reflect.TypeOf((*MockIInputController)(nil).OnPostingAccountDone), account)
}

// OnPostingAccountListAcction mocks base method.
func (m *MockIInputController) OnPostingAccountListAcction(action listaction.ListAction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPostingAccountListAcction", action)
}

// OnPostingAccountListAcction indicates an expected call of OnPostingAccountListAcction.
func (mr *MockIInputControllerMockRecorder) OnPostingAccountListAcction(action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPostingAccountListAcction", reflect.TypeOf((*MockIInputController)(nil).OnPostingAccountListAcction), action)
}

// OnPostingAccountSelectedFromContext mocks base method.
func (m *MockIInputController) OnPostingAccountSelectedFromContext() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPostingAccountSelectedFromContext")
}

// OnPostingAccountSelectedFromContext indicates an expected call of OnPostingAccountSelectedFromContext.
func (mr *MockIInputControllerMockRecorder) OnPostingAccountSelectedFromContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPostingAccountSelectedFromContext", reflect.TypeOf((*MockIInputController)(nil).OnPostingAccountSelectedFromContext))
}

// OnPostingValueInput mocks base method.
func (m *MockIInputController) OnPostingValueInput(value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPostingValueInput", value)
}

// OnPostingValueInput indicates an expected call of OnPostingValueInput.
func (mr *MockIInputControllerMockRecorder) OnPostingValueInput(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPostingValueInput", reflect.TypeOf((*MockIInputController)(nil).OnPostingValueInput), value)
}
