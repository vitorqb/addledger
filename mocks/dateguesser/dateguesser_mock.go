// Code generated by MockGen. DO NOT EDIT.
// Source: dateguesser.go

// Package mock_dateguesser is a generated GoMock package.
package mock_dateguesser

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	finance "github.com/vitorqb/addledger/internal/finance"
)

// MockIClock is a mock of IClock interface.
type MockIClock struct {
	ctrl     *gomock.Controller
	recorder *MockIClockMockRecorder
}

// MockIClockMockRecorder is the mock recorder for MockIClock.
type MockIClockMockRecorder struct {
	mock *MockIClock
}

// NewMockIClock creates a new mock instance.
func NewMockIClock(ctrl *gomock.Controller) *MockIClock {
	mock := &MockIClock{ctrl: ctrl}
	mock.recorder = &MockIClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClock) EXPECT() *MockIClockMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockIClock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockIClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockIClock)(nil).Now))
}

// MockIDateGuesser is a mock of IDateGuesser interface.
type MockIDateGuesser struct {
	ctrl     *gomock.Controller
	recorder *MockIDateGuesserMockRecorder
}

// MockIDateGuesserMockRecorder is the mock recorder for MockIDateGuesser.
type MockIDateGuesserMockRecorder struct {
	mock *MockIDateGuesser
}

// NewMockIDateGuesser creates a new mock instance.
func NewMockIDateGuesser(ctrl *gomock.Controller) *MockIDateGuesser {
	mock := &MockIDateGuesser{ctrl: ctrl}
	mock.recorder = &MockIDateGuesserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDateGuesser) EXPECT() *MockIDateGuesserMockRecorder {
	return m.recorder
}

// Guess mocks base method.
func (m *MockIDateGuesser) Guess(userInput string, statementEntry finance.StatementEntry) (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Guess", userInput, statementEntry)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Guess indicates an expected call of Guess.
func (mr *MockIDateGuesserMockRecorder) Guess(userInput, statementEntry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Guess", reflect.TypeOf((*MockIDateGuesser)(nil).Guess), userInput, statementEntry)
}
