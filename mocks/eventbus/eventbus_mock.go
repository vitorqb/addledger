// Code generated by MockGen. DO NOT EDIT.
// Source: eventbus.go

// Package mock_eventbus is a generated GoMock package.
package mock_eventbus

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	eventbus "github.com/vitorqb/addledger/internal/eventbus"
)

// MockIEventBus is a mock of IEventBus interface.
type MockIEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockIEventBusMockRecorder
}

// MockIEventBusMockRecorder is the mock recorder for MockIEventBus.
type MockIEventBusMockRecorder struct {
	mock *MockIEventBus
}

// NewMockIEventBus creates a new mock instance.
func NewMockIEventBus(ctrl *gomock.Controller) *MockIEventBus {
	mock := &MockIEventBus{ctrl: ctrl}
	mock.recorder = &MockIEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventBus) EXPECT() *MockIEventBusMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockIEventBus) Send(e eventbus.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIEventBusMockRecorder) Send(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIEventBus)(nil).Send), e)
}

// Subscribe mocks base method.
func (m *MockIEventBus) Subscribe(s eventbus.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockIEventBusMockRecorder) Subscribe(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIEventBus)(nil).Subscribe), s)
}
