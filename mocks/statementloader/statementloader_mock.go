// Code generated by MockGen. DO NOT EDIT.
// Source: statementloader.go

// Package mock_statementloader is a generated GoMock package.
package mock_statementloader

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	statementloader "github.com/vitorqb/addledger/internal/statementloader"
)

// MockStatementLoader is a mock of StatementLoader interface.
type MockStatementLoader struct {
	ctrl     *gomock.Controller
	recorder *MockStatementLoaderMockRecorder
}

// MockStatementLoaderMockRecorder is the mock recorder for MockStatementLoader.
type MockStatementLoaderMockRecorder struct {
	mock *MockStatementLoader
}

// NewMockStatementLoader creates a new mock instance.
func NewMockStatementLoader(ctrl *gomock.Controller) *MockStatementLoader {
	mock := &MockStatementLoader{ctrl: ctrl}
	mock.recorder = &MockStatementLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatementLoader) EXPECT() *MockStatementLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockStatementLoader) Load(file io.Reader) ([]statementloader.StatementEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", file)
	ret0, _ := ret[0].([]statementloader.StatementEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockStatementLoaderMockRecorder) Load(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockStatementLoader)(nil).Load), file)
}

// MockFieldImporter is a mock of FieldImporter interface.
type MockFieldImporter struct {
	ctrl     *gomock.Controller
	recorder *MockFieldImporterMockRecorder
}

// MockFieldImporterMockRecorder is the mock recorder for MockFieldImporter.
type MockFieldImporterMockRecorder struct {
	mock *MockFieldImporter
}

// NewMockFieldImporter creates a new mock instance.
func NewMockFieldImporter(ctrl *gomock.Controller) *MockFieldImporter {
	mock := &MockFieldImporter{ctrl: ctrl}
	mock.recorder = &MockFieldImporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFieldImporter) EXPECT() *MockFieldImporterMockRecorder {
	return m.recorder
}

// Import mocks base method.
func (m *MockFieldImporter) Import(statementEntry *statementloader.StatementEntry, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", statementEntry, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockFieldImporterMockRecorder) Import(statementEntry, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockFieldImporter)(nil).Import), statementEntry, value)
}
