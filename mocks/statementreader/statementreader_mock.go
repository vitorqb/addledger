// Code generated by MockGen. DO NOT EDIT.
// Source: statementreader.go

// Package mock_statementreader is a generated GoMock package.
package mock_statementreader

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	statementreader "github.com/vitorqb/addledger/internal/statementreader"
)

// MockIStatementReader is a mock of IStatementReader interface.
type MockIStatementReader struct {
	ctrl     *gomock.Controller
	recorder *MockIStatementReaderMockRecorder
}

// MockIStatementReaderMockRecorder is the mock recorder for MockIStatementReader.
type MockIStatementReaderMockRecorder struct {
	mock *MockIStatementReader
}

// NewMockIStatementReader creates a new mock instance.
func NewMockIStatementReader(ctrl *gomock.Controller) *MockIStatementReader {
	mock := &MockIStatementReader{ctrl: ctrl}
	mock.recorder = &MockIStatementReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStatementReader) EXPECT() *MockIStatementReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIStatementReader) Read(file io.Reader) ([]statementreader.StatementEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", file)
	ret0, _ := ret[0].([]statementreader.StatementEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIStatementReaderMockRecorder) Read(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIStatementReader)(nil).Read), file)
}
