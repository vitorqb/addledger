// Code generated by MockGen. DO NOT EDIT.
// Source: stringmatcher.go

// Package mock_stringmatcher is a generated GoMock package.
package mock_stringmatcher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStringMatcher is a mock of IStringMatcher interface.
type MockIStringMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIStringMatcherMockRecorder
}

// MockIStringMatcherMockRecorder is the mock recorder for MockIStringMatcher.
type MockIStringMatcherMockRecorder struct {
	mock *MockIStringMatcher
}

// NewMockIStringMatcher creates a new mock instance.
func NewMockIStringMatcher(ctrl *gomock.Controller) *MockIStringMatcher {
	mock := &MockIStringMatcher{ctrl: ctrl}
	mock.recorder = &MockIStringMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStringMatcher) EXPECT() *MockIStringMatcherMockRecorder {
	return m.recorder
}

// Distance mocks base method.
func (m *MockIStringMatcher) Distance(a, b string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Distance", a, b)
	ret0, _ := ret[0].(int)
	return ret0
}

// Distance indicates an expected call of Distance.
func (mr *MockIStringMatcherMockRecorder) Distance(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distance", reflect.TypeOf((*MockIStringMatcher)(nil).Distance), a, b)
}
